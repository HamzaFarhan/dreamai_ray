# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/index/00_utils.ipynb.

# %% auto 0
__all__ = ['create_index', 'index_heap']

# %% ../../nbs/index/00_utils.ipynb 2
from ..imports import *
from ..utils import *
from ..mapper import *


# %% ../../nbs/index/00_utils.ipynb 4
def create_index(dim=768):
    return faiss.IndexFlatL2(dim)


def index_heap(
    df, k=1, dist_col="distances", ids_col="ids", size_col="index_size", verbose=False
):
    rh = faiss.ResultHeap(nq=1, k=k)

    ds = df[dist_col].tolist()
    if verbose:
        msg.info(f"Distances: {ds}")
    ids = df[ids_col].tolist()
    if verbose:
        msg.info(f"IDs: {ids}")
    sz = df[size_col].tolist()
    if verbose:
        msg.info(f"Index Size: {sz}")
    for i in range(len(ds)):
        offset = sum(sz[:i])
        if verbose:
            msg.info(f"Adding Result: {ds[i]}, {ids[i] + offset}")
        rh.add_result(ds[i], ids[i] + offset)
        if verbose:
            msg.good(f"Added Result: {ds[i]}, {ids[i] + offset}")
    rh.finalize()
    return {"distances": rh.D, "ids": rh.I}
